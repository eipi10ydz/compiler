(1) 这个list和C++ STL的list有哪些不同？

1. 这个list只有节点的定义，而STL里面的list不仅有节点的定义，还有list本身的定义。原因大概是这里的list实现与Lisp之流差不多，把节点也看做表，list的实现中head返回的是list中第一个元素，tail返回的是除第一个元素后所有元素组成的list。

2. 这个list是单向链表，STL里面的list是双向链表

3. 这个list由于只有节点的定义，没有list本身定义，因此没有一个有效的插入元素的机制，只能通过构造函数不断在原list前面添加，而STL的list本身提供push_front, push_back。STL的list还提供了其他一些操作，方便使用。

4. 这个list没有定义析构函数，因此对head指向的对象的内存管理只能由自己来进行，如果忘记释放head指向的内存空间，会导致内存泄漏，而STL的list数据域类型就是模板参数T，而不是T*，会被析构(当然也要由T这个类型来保证)

5. 这个list没有定义拷贝构造函数/拷贝赋值运算符(或者应该把拷贝构造函数定义为delete)，导致合成的默认拷贝为浅拷贝，如果head指向的内存空间被释放，就可能导致空指针的解引用/double free等等问题，而STL的list定义了相应的拷贝构造函数和拷贝赋值运算符，并使用allocator管理内存，可以避免这些问题的发生

6. 这个list没有提供迭代器实现，STL的list提供了双向迭代器(bidirectional iterator)

cool-tour.pdf里面说了尽量简化，不考虑内存管理、尽量不重载运算符等等，然后上面的有几条就可以作废了。


(2) String table的意义是什么？

1. 用于按类型(标识符、字面值常量、字符串常量)管理代码中出现的字符串，便于按不同类型生成不同代码

2. 同一种类的String Table中相同字符串只出现一次，避免相同字符串重复申请空间，便于管理，在一定程度上弥补了不考虑内存管理带来的一些问题。。。
