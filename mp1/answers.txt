MP1.1
(1) 这个list和C++ STL的list有哪些不同？

1. 这个list只有节点的定义，而STL里面的list不仅有节点的定义，还有list本身的定义。原因大概是这里的list实现与Lisp之流差不多，把节点也看做表，list的实现中head返回的是list中第一个元素，tail返回的是除第一个元素后所有元素组成的list。

2. 这个list是单向链表，STL里面的list是双向链表

3. 这个list由于只有节点的定义，没有list本身定义，因此没有一个有效的插入元素的机制，只能通过构造函数不断在原list前面添加，而STL的list本身提供push_front, push_back。STL的list还提供了其他一些操作，方便使用。

4. 这个list没有定义析构函数，因此对head指向的对象的内存管理只能由自己来进行，如果忘记释放head指向的内存空间，会导致内存泄漏，而STL的list数据域类型就是模板参数T，而不是T*，会被析构(当然也要由T这个类型来保证)

5. 这个list没有定义拷贝构造函数/拷贝赋值运算符(或者应该把拷贝构造函数定义为delete)，导致合成的默认拷贝为浅拷贝，如果head指向的内存空间被释放，就可能导致空指针的解引用/double free等等问题，而STL的list定义了相应的拷贝构造函数和拷贝赋值运算符，并使用allocator管理内存，可以避免这些问题的发生

6. 这个list没有提供迭代器实现，STL的list提供了双向迭代器(bidirectional iterator)

cool-tour.pdf里面说了尽量简化，不考虑内存管理、尽量不重载运算符等等，然后上面的有几条就可以作废了。


(2) String table的意义是什么？

1. 用于按类型(标识符、字面值常量、字符串常量)管理代码中出现的字符串，便于按不同类型生成不同代码

2. 同一种类的String Table中相同字符串只出现一次，避免相同字符串重复申请空间，便于管理，在一定程度上弥补了不考虑内存管理带来的一些问题。。。


MP1.3
做实验过程中遇到的问题
1. let语句行号与reference-binaries里面的行号不同
结果发现在没有赋初始值的情况下才会行号不同。原来的写法如下所示(为节约篇幅省去大部分表达式):

let_list
        :   IN expr
            { $$ = $2; }
        |   ',' OBJECTID ':' TYPEID ASSIGN expr let_list
            { $$ = let($2, $4, $6, $7); }
        |   ',' OBJECTID ':' TYPEID let_list
            { $$ = let($2, $4, no_expr(), $5); }
        ;

expr    :   LET OBJECTID ':' TYPEID ASSIGN expr let_list
            { $$ = let($2, $4, $6, $7); }
        |   LET OBJECTID ':' TYPEID let_list
            { $$ = let($2, $4, no_expr(), $5); }
        ;

可见这时如果没有赋值，会导致let行号不一致。
原因应该在于如果没有赋值，不会在该处规约，导致行号为let结束时的行号。
因此可以修改文法，使文法满足两种情形均规约即可。
为了方便，把两种情况统一为assign_list。

assign_list
        :
            { $$ = no_expr(); }
        |   ASSIGN expr
            { $$ = $2; }

let_list
        :   IN expr
            { $$ = $2; }
        |   ',' OBJECTID ':' TYPEID assign_list let_list
            { $$ = let($2, $4, $5, $6); }
        ;

expr    |   LET OBJECTID ':' TYPEID assign_list let_list
            { $$ = let($2, $4, $5, $6); };

修改后即可实现行号与reference-binaries一致。

2.let语句具有二义性，为了消除冲突，给IN加入优先级

3.dispatch的多种形式需要不重不漏的考虑
(1)没有对象要补上self
(2)参数列表可能为空

其中bison_test_good.cl依次检查以下东西
1.空类
2.继承
3.两条let语句进行运算
4.运算符结合性及优先级
5.赋值语句
6.赋值语句结合性
7.加减乘除结合性
8.实现atoi的类，里面包含嵌套if then else fi, while loop pool等
9.多分支case
10.一个属性的方法
11.一个属性的类
12.多个属性的类
13.比较运算符
14.复数类，里面包含let, if then else fi, ~, 等
15.方法调用(多参数, 参数为空, 单参数)
16.if
17.嵌套if
18.let(参数带赋值, 参数不带赋值, 带括号的几种情形)
19.方法调用(检查调用父类方法的情况)
20.多属性类
21.方法调用(需要补上self)
22.嵌套语句块
23.嵌套let
24.没有参数的@调用
25.一元运算符
26.while循环

MP1.3 第二次提交(错误处理)
1. class 的检查
(1)只在其它部分齐全的情况下考虑class外少分号的情况
class : CLASS TYPEID '{' feature_list '}' error
        { yyerrok; }
像下面这种情况
class a {};
A {};
class a {};
如果写成
a:
class : CLASS error ';'
        { yyerrork; }
就能同时检查出这三行都有错
但如果写成
b:
class : CLASS error
        { yyerrork; }
中间一行就会被吃掉，只报第一和第三行错。
但也不是说这样就完美了。像下面这种情况
class a <- {}
class a {};
如果写成a，就会一直吃到第二行最后的分号，导致第二行的class其实有错但没有报
(2)因此，在其它部分错误的情况下默认吃到下一个分号，比如类似下面这种处理方式
class : CLASS TYPEID error ';'
        { yyerrok; }
所以可能会有遗漏或者导致错误，如
class A <- {
	var : Int <- 0;
	set_var(var : Int) : SELF_TYPE {
		let x : Int <- 0 in
			let y : Int <- 0 in
				10
	};
};
会在第三行莫名其妙地报set_var错，实际上就是吃到了第二行末尾的分号
(3)处理没写class的情况。虽然说其实我觉得如果真想写一个class还忘了写class关键字真心不可能，倒可能是错在其它地方了。。。但后来还是加进来了
(4)处理不止一个错误的情况，像下面的cool代码
class a {};
B {}
class a {};
就可以报出第二行的缺了class和分号(虽然会报到第三行的class，因为要读到下一个才知道是缺少分号，是error)
(5)然后其实有两个错误就有可能有三个错误。。。但是我不打算考虑这个，毕竟我也没必要一次把所有都标出来，每一次都改一波错就好了
2. feature的处理类似class，分别是
(1)只在其它部分齐全的情况下考虑少分号的情况
(2)在其它部分错误的情况下默认吃到下一个分号
(3)考虑没写OBJECTID的情况
(4)处理不止一个错误的情况
3. 其它的结构简单，就算直接报error也应该问题不大，所以处理起来较为简略。
(1)formal_list, assign_list, case直接加了error
(2)expr加了error，所以在para_list, let_list等就直接不管了
(3)expr就额外处理了if结构和while结构
4. 测试例全部放在bison_test_bad?.cl中